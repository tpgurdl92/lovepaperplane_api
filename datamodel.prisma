type User {
  id: ID! @id
  username:String! @unique
  nickname:String! 
  machineId:String! @unique
  bio:String
  birthDate: String!
  gender: String!
  rooms: [Room]! @relation(name:"RoomOfUser" onDelete:CASCADE)
  banningUser : [User]! @relation(name: "BanningUserofUser" )
  location: String!
  pushFlag : Boolean!
  normalPlane : Int!
  goldPlane:Int!
  complainned:[Complain]! @relation(name:"ComplainnedOfUser" onDelete:CASCADE)
  complainning:[Complain]! @relation(name:"ComplainningOfUser" onDelete:CASCADE)
  createdAt:DateTime! @createdAt
  updatedAt:DateTime! @updatedAt
}


type Room {
  id:ID! @id
  participant:[User]! @relation(name:"RoomOfUser")
  messages:[Message]!  @relation(name:"MessageOfRoom" onDelete:CASCADE)
  isAlive: Boolean!
  blockFlg:[BlockFlg]! @relation(name:"BlockFlg" onDelete:CASCADE) 
  createdAt:DateTime! @createdAt
  updatedAt:DateTime! @updatedAt
}

type BlockFlg {
  id:ID! @id
  room:Room! @relation(name:"BlockFlg")
  fromId:String!
  toId:String!
  flag:Boolean!
  createdAt:DateTime! @createdAt
  updatedAt:DateTime! @updatedAt
}

type Message{
  id:ID! @id
  type:String!
  data: String!
  from: User! @relation(name:"From")
  to:User! @relation(name:"To")
  room:Room! @relation(name:"MessageOfRoom")
  createdAt:DateTime! @createdAt
  updatedAt:DateTime! @updatedAt
  isChecked: Boolean!
}

type Complain{
  id:ID! @id
  from:User! @relation(name:"ComplainningOfUser")
  to:User! @relation(name:"ComplainnedOfUser")
  messageId:String!
  category:String!
  comment:String
}